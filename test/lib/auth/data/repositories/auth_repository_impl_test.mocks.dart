// Mocks generated by Mockito 5.2.0 from annotations
// in microblogging/test/lib/auth/data/repositories/auth_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:microblogging/features/auth/data/datasources/auth_local_datasource.dart'
    as _i3;
import 'package:microblogging/features/auth/data/models/models.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserModel_0 extends _i1.Fake implements _i2.UserModel {}

/// A class which mocks [IAuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthLocalDataSource extends _i1.Mock
    implements _i3.IAuthLocalDataSource {
  MockIAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isLogged() =>
      (super.noSuchMethod(Invocation.method(#isLogged, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.UserModel?> getLastAuth() =>
      (super.noSuchMethod(Invocation.method(#getLastAuth, []),
              returnValue: Future<_i2.UserModel?>.value())
          as _i4.Future<_i2.UserModel?>);
  @override
  _i4.Future<_i2.UserModel> signIn(_i2.SignInModel? login) =>
      (super.noSuchMethod(Invocation.method(#signIn, [login]),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<void> cacheAuth(_i2.UserModel? userToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheAuth, [userToCache]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.UserModel> signUp(_i2.UserModel? signUp) =>
      (super.noSuchMethod(Invocation.method(#signUp, [signUp]),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
